provider "aws" {
  region = var.aws_region
}

# Lambda function for AVIF conversion
resource "aws_lambda_function" "convert_to_avif" {
  function_name    = "convert-to-avif"
  filename         = "convert-to-avif.zip"
  handler          = "index.handler"
  runtime          = "nodejs18.x"
  role             = aws_iam_role.lambda_exec.arn
  timeout          = 30
  memory_size      = 1024 # Higher memory allocation for image processing
  layers           = [var.sharp_layer_arn]

  environment {
    variables = {
      OUTPUT_BUCKET = aws_s3_bucket.avif_images.bucket
    }
  }
}

# S3 bucket for storing AVIF images
resource "aws_s3_bucket" "avif_images" {
  bucket = var.s3_bucket_name
}

# S3 bucket for CORS configuration to allow front-end access
resource "aws_s3_bucket_cors_configuration" "cors_config" {
  bucket = aws_s3_bucket.avif_images.bucket

  cors_rule {
    allowed_headers = ["*"]
    allowed_methods = ["GET"]
    allowed_origins = ["*"] # Restrict to your domains in production
    expose_headers  = ["ETag"]
    max_age_seconds = 3000
  }
}

# IAM role for Lambda
resource "aws_iam_role" "lambda_exec" {
  name = "ygo_avif_converter_lambda_role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Effect    = "Allow"
      Principal = { Service = "lambda.amazonaws.com" }
      Action    = "sts:AssumeRole"
    }]
  })
}

# IAM policy for Lambda to access S3
resource "aws_iam_policy" "lambda_s3_policy" {
  name        = "ygo_avif_converter_s3_policy"
  description = "Policy to allow Lambda to access S3 bucket"

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect   = "Allow"
        Action   = [
          "s3:GetObject",
          "s3:PutObject",
          "s3:ListBucket"
        ]
        Resource = [
          aws_s3_bucket.avif_images.arn,
          "${aws_s3_bucket.avif_images.arn}/*"
        ]
      },
      {
        Effect   = "Allow"
        Action   = [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
        ]
        Resource = "arn:aws:logs:*:*:*"
      }
    ]
  })
}

# Attach the policy to the Lambda role
resource "aws_iam_role_policy_attachment" "lambda_s3" {
  role       = aws_iam_role.lambda_exec.name
  policy_arn = aws_iam_policy.lambda_s3_policy.arn
}

# API Gateway for the Lambda function
resource "aws_apigatewayv2_api" "api" {
  name          = "avif-converter-api"
  protocol_type = "HTTP"
}

resource "aws_apigatewayv2_stage" "default" {
  api_id      = aws_apigatewayv2_api.api.id
  name        = "$default"
  auto_deploy = true
}

resource "aws_apigatewayv2_integration" "lambda_integration" {
  api_id                 = aws_apigatewayv2_api.api.id
  integration_type       = "AWS_PROXY"
  integration_uri        = aws_lambda_function.convert_to_avif.invoke_arn
  payload_format_version = "2.0"
}

resource "aws_apigatewayv2_route" "default_route" {
  api_id    = aws_apigatewayv2_api.api.id
  route_key = "POST /convert"
  target    = "integrations/${aws_apigatewayv2_integration.lambda_integration.id}"
}

resource "aws_lambda_permission" "api_gateway" {
  statement_id  = "AllowAPIGatewayInvoke"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.convert_to_avif.function_name
  principal     = "apigateway.amazonaws.com"
  source_arn    = "${aws_apigatewayv2_api.api.execution_arn}/*/*/convert"
}

# Output the API Gateway URL
output "api_url" {
  value = "${aws_apigatewayv2_stage.default.invoke_url}/convert"
}
